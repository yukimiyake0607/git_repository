// Mocks generated by Mockito 5.4.4 from annotations
// in git_repository/test/unit/mock/usecase/usecase_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:git_repository/core/result/result.dart' as _i2;
import 'package:git_repository/data/usecase/repository_usecase.dart' as _i3;
import 'package:git_repository/models/repository_exception/repository_exception.dart'
    as _i6;
import 'package:git_repository/models/searchRepository/search_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T, E> extends _i1.SmartFake implements _i2.Result<T, E> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryUsecase extends _i1.Mock implements _i3.RepositoryUsecase {
  @override
  _i4.Future<
      _i2
      .Result<_i5.SearchRepository, _i6.RepositoryException>> fetchRepository(
    String? keyword,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRepository,
          [
            keyword,
            page,
          ],
        ),
        returnValue: _i4.Future<
                _i2
                .Result<_i5.SearchRepository, _i6.RepositoryException>>.value(
            _FakeResult_0<_i5.SearchRepository, _i6.RepositoryException>(
          this,
          Invocation.method(
            #fetchRepository,
            [
              keyword,
              page,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2
                .Result<_i5.SearchRepository, _i6.RepositoryException>>.value(
            _FakeResult_0<_i5.SearchRepository, _i6.RepositoryException>(
          this,
          Invocation.method(
            #fetchRepository,
            [
              keyword,
              page,
            ],
          ),
        )),
      ) as _i4
          .Future<_i2.Result<_i5.SearchRepository, _i6.RepositoryException>>);
}
